library( shiny)
#library( shinySignals)   # devtools::install_github("hadley/shinySignals")
library( dplyr)
library( shinydashboard)
#library( bubbles)        # devtools::install_github("jcheng5/bubbles")


ui <- dashboardPage(
  dashboardHeader( title = "FJ - Dashboard Test"),
  dashboardSidebar(
    sliderInput( "rateThreshold", "Warn when rate exceeds",
                min = 0, max = 50, value = 3, step = 0.1
    ),
    sidebarMenu(
      menuItem("Dashboard", tabName = "dashboard"),
      menuItem("Raw data", tabName = "rawdata")
    )
  ),
  dashboardBody(
    tabItems(
      tabItem("dashboard",
              fluidRow(  # 上方三个box
                valueBoxOutput("rate"),
                valueBoxOutput("count"),
                valueBoxOutput("users")
              ),
              fluidRow(
                box(
                  width = 8, status = "info", solidHeader = TRUE,
                  title = "Popularity by package (last 5 min)",
                  plotOutput("packagePlot", width = "100%", height = 600)
                ),
                box(
                  width = 4, status = "info",
                  title = "Top packages (last 5 min)",
                  tableOutput("packageTable")
                )
              )
      ),
      tabItem("rawdata",
              numericInput("maxrows", "Rows to show", 25),
              verbatimTextOutput("rawtable"),
              downloadButton("downloadCsv", "Download as CSV")
      )
    )
  )
)

## Data
library( data.table)
channel_dataset <- tbl_df( fread( "F:\\数据分析需求\\2017.10\\2017.10.14 - DB Dataset\\渠道.csv",
                             stringsAsFactors = F, 
                             header = T, 
                             encoding = "UTF-8",
                             data.table = TRUE) )
channel_dataset %>% 
  select( client, spread) %>%
  group_by( client, spread ) %>% 
  summarise( Num_Channel = n()) %>%
  arrange( client, desc( Num_Channel))
  


server <- function(input, output, session) {

  ## term dashboard
  output$rate <- renderValueBox({
    # The downloadRate is the number of rows in pkgData since
    # either startTime or maxAgeSecs ago, whichever is later.
    #elapsed <- as.numeric(Sys.time()) - startTime
    #downloadRate <- nrow(pkgData()) / min(maxAgeSecs, elapsed)
    value = 14.1
    valueBox(
      value = 14.1,
      subtitle = "Downloads per sec (last 5 min)",
      icon = icon("area-chart"),
      color = if (value >= input$rateThreshold) "yellow" else "aqua"  # 与左侧的rateThreshold 交互。
    )
  })
  
  output$count <- renderValueBox({
    valueBox(
      value = 10000,
      subtitle = "Total downloads",
      icon = icon("download")
    )
  })
  
  output$users <- renderValueBox({
    valueBox(
      1000,
      "Unique users",
      icon = icon("users")
    )
  })

  output$packagePlot <- renderPlot({
    df <- channel_dataset %>% 
      select( client, spread) %>%
      group_by( client, spread ) %>% 
      summarise( Num_Channel = n()) %>%
      arrange( client, desc( Num_Channel))
    
    ggplot( df, aes( spread, Num_Channel)) + 
      geom_point( aes( color = client)) + 
      coord_flip()
  })
  
  output$packageTable <- renderTable({ 
    channel_dataset[ sample( 1:nrow( channel_dataset), 15),] %>% 
      select( channel, client, spread, channel_code)
  }, digits = 1)
  
  output$downloadCsv <- downloadHandler(
    filename = "cranlog.csv",
    content = function( file) {
      write.csv( df, file)
    },
    contentType = "text/csv"
  )
  
  output$rawtable <- renderPrint({
    orig <- options( width = 1000)
    print( tail( df, input$maxrows)) # 这里的参数与dashboardBody 中的maxrows交互了
    options( orig)
  })
  
}

shinyApp( ui, server)

